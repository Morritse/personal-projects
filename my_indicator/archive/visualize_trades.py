import pandas as pd
import matplotlib.pyplot as plt
from vwap_obv_strategy import VAMEStrategy
# Import base config and extract first value from arrays
from config import config as config_arrays
config = {k: v[0] if isinstance(v, list) else v for k, v in config_arrays.items()}
# Handle nested regime params
if 'regime_params' in config:
    for regime in config['regime_params']:
        config['regime_params'][regime] = {
            k: v[0] if isinstance(v, list) else v 
            for k, v in config['regime_params'][regime].items()
        }

def load_data(symbol):
    """Load price data from cache"""
    df = pd.read_csv(f'cache_data/{symbol.lower()}_data.csv', 
                    index_col=0, parse_dates=True)
    return df

def plot_trades(df, trades):
    """Plot price data with trade markers"""
    plt.figure(figsize=(15, 7))
    
    # Plot price data
    plt.plot(df.index, df['close'], label='Price', alpha=0.5)
    
    # Plot trades
    for trade in trades:
        if trade['action'] == 'BUY':
            plt.axvline(trade['timestamp'], color='green', alpha=0.3)
            plt.plot(trade['timestamp'], trade['price'], 'g^', markersize=10)
        elif trade['action'] == 'SELL':
            plt.axvline(trade['timestamp'], color='red', alpha=0.3)
            plt.plot(trade['timestamp'], trade['price'], 'rv', markersize=10)
    
    plt.title('Trade Visualization')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    # Load BTC data
    symbol = 'BTC/USD'
    df = load_data(symbol.replace('/', '_'))
    
    # Run strategy to get trades
    strategy = VAMEStrategy(config)
    trades = strategy.run(df)
    
    if trades:  # Only process trades if there are any
        # Convert trades to DataFrame for easier plotting
        trades_df = pd.DataFrame([{
            'timestamp': t['timestamp'],
            'price': t['price'],
            'action': t['action']
        } for t in trades])
        trades_df['timestamp'] = pd.to_datetime(trades_df['timestamp'])
        
        # Plot trades
        plot_trades(df, trades_df.to_dict('records'))
    else:
        print("No trades generated by strategy")
        # Plot just the price data without trades
        plt.figure(figsize=(15, 7))
        plt.plot(df.index, df['close'], label='Price', alpha=0.5)
        plt.title('Price Data (No Trades)')
        plt.xlabel('Date')
        plt.ylabel('Price')
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()
